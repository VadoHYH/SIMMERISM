# .github/workflows/ci-build-check.yml
name: Next.js CI Build & Console & Test Check

on:
  pull_request:
    branches:
      - develop
      - main # 當有 Pull Request 目標 main 分支時觸發
  push:
    branches:
      - develop
      - main # 當有新的程式碼推送到 main 分支時觸發

jobs:
  build_check:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 虛擬機作為執行環境

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # 將你的 GitHub 專案程式碼下載到執行器中

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # <-- 重要：請確認你的 Next.js 專案使用的 Node.js 版本
                             #      你的 package.json 並未明確指定 engines 欄位，
                             #      Node.js 20 是相對較新的穩定版本，通常適用。
                             #      如果本地開發環境使用其他版本，請在此處修改。
          cache: 'npm'       # 啟用 npm 依賴快取，加速安裝過程

      - name: 📦 Install dependencies
        run: npm install # 執行 npm install 安裝 package.json 中定義的所有依賴
        working-directory: ./simmerism/

      - name: Run ESLint Checks (包含 console 規範)
        # 執行你專案的 ESLint 命令，通常是 `next lint`。
        # 如果程式碼中包含不允許的 console.log，此步驟會失敗。
        run: npm run lint
        working-directory: ./simmerism/

      - name: Build Next.js for Production (實際移除 console 並驗證建置)
        # 這個步驟會執行 Next.js 的生產環境建置。
        # 因為 next.config.ts 中的 `removeConsole` 配置 (基於 NODE_ENV === 'production')，
        # 所有的 console.log、console.info 等將會被移除。
        # 同時也驗證整個專案在生產環境下是否能成功打包。
        run: npm run build
        working-directory: ./simmerism/

      - name: Run Unit Tests 
        # 根據你的 package.json，此處執行 `npm run test` 會觸發 Jest
        run: npm run test
        working-directory: ./simmerism/

      - name: CI Check Completed
        run: echo "Next.js CI checks passed. Production build successful, console logs removed, and tests passed."